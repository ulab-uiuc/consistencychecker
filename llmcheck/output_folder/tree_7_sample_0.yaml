operations:
- ['1. "Replace the ''main'' function in the ''code'' key with a recursive function
    that uses memoization to improve performance, utilizing a dictionary to store
    and reuse intermediate results', 'revert the ''main'' function to use a non-recursive,
    iterative approach, dropping memoization and restoring original logic"']
- ['2. "Implement the ''main'' function in the ''code'' key using a functional programming
    style, with a focus on immutability and higher-order functions, encapsulating
    data and behavior within pure functions', 'transform the functional implementation
    back into an imperative, mutable version, using global variables and side effects
    as needed"']
- ['3. "Use a type hinting system in the ''main'' function in the ''code'' key to
    specify the types of function arguments and return values, leveraging type inference
    and static analysis tools', 'remove type hints and annotations, opting for runtime
    type checking and dynamic typing instead"']
metrics:
  embedding similarity L-1 AVG: 0.9183549965923911
  embedding similarity L-1: [0.9194723457119831, 0.8355926440651901, 1.0]
  BLEU L-1 AVG: 0.3333333333333333
  BLEU L-1: [0, 0, 1.0]
  ROUGE-rouge1 L-1 AVG: 0.3333333333333333
  ROUGE-rouge1 L-1: [0.0, 0.0, 1.0]
  ROUGE-rouge2 L-1 AVG: 0.3333333333333333
  ROUGE-rouge2 L-1: [0.0, 0.0, 1.0]
  ROUGE-rougeL L-1 AVG: 0.3333333333333333
  ROUGE-rougeL L-1: [0.0, 0.0, 1.0]
  embedding similarity L-2 AVG: 0.0
  embedding similarity L-2: []
  BLEU L-2 AVG: 0.0
  BLEU L-2: []
  ROUGE-rouge1 L-2 AVG: 0.0
  ROUGE-rouge1 L-2: []
  ROUGE-rouge2 L-2 AVG: 0.0
  ROUGE-rouge2 L-2: []
  ROUGE-rougeL L-2 AVG: 0.0
  ROUGE-rougeL L-2: []
  embedding similarity L-3 AVG: 0.0
  embedding similarity L-3: []
  BLEU L-3 AVG: 0.0
  BLEU L-3: []
  ROUGE-rouge1 L-3 AVG: 0.0
  ROUGE-rouge1 L-3: []
  ROUGE-rouge2 L-3 AVG: 0.0
  ROUGE-rouge2 L-3: []
  ROUGE-rougeL L-3 AVG: 0.0
  ROUGE-rougeL L-3: []
evaluatee_model: {model: fireworks_ai/accounts/fireworks/models/llama-v3p1-8b-instruct,
  temperature: 0.6, api_base: 'https://api.fireworks.ai/inference/v1'}
root_content:
  description: '# Maximum XOR With an Array Element

    You are given a non-empty array of integers `nums` and an integer `target`.

    Find the maximum integer in the array that can be obtained by performing a series
    of XOR operations on `nums` where each number can be used at most once.

    Return the maximum integer that can be obtained by performing the above operations,
    or 0 if no such integer exists.


    Example 1:

    Input: nums = [3, 9, 8, 4], target = 2

    Output: 3


    Example 2:

    Input: nums = [1, 2, 3, 4], target = 7

    Output: 4


    Example 3:

    Input: nums = [5, 6, 7, 8], target = 2

    Output: 0


    Note:

    - 1 <= nums.length <= 25

    - 1 <= nums[i], target <= 10^9

    - It''s guaranteed that the answer is unique.

    '
  code: "from functools import lru_cache\n\ndef main(nums, target):\n  def get_bit(num):\n\
    \    binary = bin(num)[2:]\n    return [int(bit) for bit in binary]\n\n  @lru_cache(None)\n\
    \  def get_max_xor(i, target):\n    if target == 0:\n      return 0\n    if i\
    \ == len(nums):\n      return 0\n    return max(get_max_xor(i + 1, target), get_max_xor(i\
    \ + 1, target ^ nums[i]) + nums[i])\n\n  return get_max_xor(0, target)\n"
  programming_language: python3
  inputs:
  - nums: [3, 9, 8, 4]
    target: 2
  - nums: [1, 2, 3, 4]
    target: 7
  - nums: [5, 6, 7, 8]
    target: 2
  - nums: [2, 4, 6, 8]
    target: 3
  - nums: [1, 2, 3, 4]
    target: 4
  - nums: [5, 6, 7, 8]
    target: 1
  - nums: [3, 9, 8, 4]
    target: 3
  - nums: [1, 2, 3, 4]
    target: 5
  - nums: [5, 6, 7, 8]
    target: 6
  - nums: [2, 4, 6, 8]
    target: 4
  - nums: [1, 2, 3, 4]
    target: 2
  - nums: [5, 6, 7, 8]
    target: 8
  - nums: [3, 9, 8, 4]
    target: 9
  - nums: [1, 2, 3, 4]
    target: 3
  - nums: [5, 6, 7, 8]
    target: 7
  - nums: [2, 4, 6, 8]
    target: 6
  - nums: [1, 2, 3, 4]
    target: 6
  - nums: [5, 6, 7, 8]
    target: 5
  - nums: [3, 9, 8, 4]
    target: 1
  - nums: [1, 2, 3, 4]
    target: 8
  exec_results: [21, 10, 26, 20, 10, 26, 21, 10, 26, 20, 10, 26, 24, 9, 26, 18, 10,
    21, 24, 10]
tree:
  operation: null
  middle_state: null
  content:
    description: '# Maximum XOR With an Array Element

      You are given a non-empty array of integers `nums` and an integer `target`.

      Find the maximum integer in the array that can be obtained by performing a series
      of XOR operations on `nums` where each number can be used at most once.

      Return the maximum integer that can be obtained by performing the above operations,
      or 0 if no such integer exists.


      Example 1:

      Input: nums = [3, 9, 8, 4], target = 2

      Output: 3


      Example 2:

      Input: nums = [1, 2, 3, 4], target = 7

      Output: 4


      Example 3:

      Input: nums = [5, 6, 7, 8], target = 2

      Output: 0


      Note:

      - 1 <= nums.length <= 25

      - 1 <= nums[i], target <= 10^9

      - It''s guaranteed that the answer is unique.

      '
    code: "from functools import lru_cache\n\ndef main(nums, target):\n  def get_bit(num):\n\
      \    binary = bin(num)[2:]\n    return [int(bit) for bit in binary]\n\n  @lru_cache(None)\n\
      \  def get_max_xor(i, target):\n    if target == 0:\n      return 0\n    if\
      \ i == len(nums):\n      return 0\n    return max(get_max_xor(i + 1, target),\
      \ get_max_xor(i + 1, target ^ nums[i]) + nums[i])\n\n  return get_max_xor(0,\
      \ target)\n"
    programming_language: python3
    inputs:
    - nums: [3, 9, 8, 4]
      target: 2
    - nums: [1, 2, 3, 4]
      target: 7
    - nums: [5, 6, 7, 8]
      target: 2
    - nums: [2, 4, 6, 8]
      target: 3
    - nums: [1, 2, 3, 4]
      target: 4
    - nums: [5, 6, 7, 8]
      target: 1
    - nums: [3, 9, 8, 4]
      target: 3
    - nums: [1, 2, 3, 4]
      target: 5
    - nums: [5, 6, 7, 8]
      target: 6
    - nums: [2, 4, 6, 8]
      target: 4
    - nums: [1, 2, 3, 4]
      target: 2
    - nums: [5, 6, 7, 8]
      target: 8
    - nums: [3, 9, 8, 4]
      target: 9
    - nums: [1, 2, 3, 4]
      target: 3
    - nums: [5, 6, 7, 8]
      target: 7
    - nums: [2, 4, 6, 8]
      target: 6
    - nums: [1, 2, 3, 4]
      target: 6
    - nums: [5, 6, 7, 8]
      target: 5
    - nums: [3, 9, 8, 4]
      target: 1
    - nums: [1, 2, 3, 4]
      target: 8
    exec_results: [21, 10, 26, 20, 10, 26, 21, 10, 26, 20, 10, 26, 24, 9, 26, 18,
      10, 21, 24, 10]
  children:
  - operation: ['1. "Replace the ''main'' function in the ''code'' key with a recursive
        function that uses memoization to improve performance, utilizing a dictionary
        to store and reuse intermediate results', 'revert the ''main'' function to
        use a non-recursive, iterative approach, dropping memoization and restoring
        original logic"']
    middle_state:
      description: '# Maximum XOR With an Array Element

        You are given a non-empty array of integers `nums` and an integer `target`.

        Find the maximum integer in the array that can be obtained by performing a
        series of XOR operations on `nums` where each number can be used at most once.

        Return the maximum integer that can be obtained by performing the above operations,
        or 0 if no such integer exists.


        Example 1:

        Input: nums = [3, 9, 8, 4], target = 2

        Output: 3


        Example 2:

        Input: nums = [1, 2, 3, 4], target = 7

        Output: 4


        Example 3:

        Input: nums = [5, 6, 7, 8], target = 2

        Output: 0


        Note:

        - 1 <= nums.length <= 25

        - 1 <= nums[i], target <= 10^9

        - It''s guaranteed that the answer is unique.

        '
      code: "from functools import lru_cache\n\ndef main(nums, target):\n  def get_bit(num):\n\
        \    binary = bin(num)[2:]\n    return [int(bit) for bit in binary]\n\n  @lru_cache(None)\n\
        \  def get_max_xor(i):\n    if i == len(nums):\n      return 0\n    return\
        \ max(get_max_xor(i + 1), get_max_xor(i + 1, nums[i]) + nums[i])\n\n  def\
        \ get_max_xor_helper(i, target):\n    if target == 0:\n      return 0\n  \
        \  return max(get_max_xor_helper(i + 1, target), get_max_xor_helper(i + 1,\
        \ target ^ nums[i]) + nums[i])\n    \n  return get_max_xor_helper(0, target)"
      programming_language: python3
      inputs:
      - nums: [3, 9, 8, 4]
        target: 2
      - nums: [1, 2, 3, 4]
        target: 7
      - nums: [5, 6, 7, 8]
        target: 2
      - nums: [2, 4, 6, 8]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 4
      - nums: [5, 6, 7, 8]
        target: 1
      - nums: [3, 9, 8, 4]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 5
      - nums: [5, 6, 7, 8]
        target: 6
      - nums: [2, 4, 6, 8]
        target: 4
      - nums: [1, 2, 3, 4]
        target: 2
      - nums: [5, 6, 7, 8]
        target: 8
      - nums: [3, 9, 8, 4]
        target: 9
      - nums: [1, 2, 3, 4]
        target: 3
      - nums: [5, 6, 7, 8]
        target: 7
      - nums: [2, 4, 6, 8]
        target: 6
      - nums: [1, 2, 3, 4]
        target: 6
      - nums: [5, 6, 7, 8]
        target: 5
      - nums: [3, 9, 8, 4]
        target: 1
      - nums: [1, 2, 3, 4]
        target: 8
      exec_results: [null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null]
    content:
      description: '# Maximum XOR With an Array Element

        You are given a non-empty array of integers `nums` and an integer `target`.

        Find the maximum integer in the array that can be obtained by performing a
        series of XOR operations on `nums` where each number can be used at most once.

        Return the maximum integer that can be obtained by performing the above operations,
        or 0 if no such integer exists.


        Example 1:

        Input: nums = [3, 9, 8, 4], target = 2

        Output: 3


        Example 2:

        Input: nums = [1, 2, 3, 4], target = 7

        Output: 4


        Example 3:

        Input: nums = [5, 6, 7, 8], target = 2

        Output: 0


        Note:

        - 1 <= nums.length <= 25

        - 1 <= nums[i], target <= 10^9

        - It''s guaranteed that the answer is unique.

        '
      code: "def main(nums, target):\n  def get_bit(num):\n    binary = bin(num)[2:]\n\
        \    return [int(bit) for bit in binary]\n\n  max_xor = 0\n  for i in range(len(nums)):\n\
        \    for j in range(i + 1, len(nums) + 1):\n      current_xor = 0\n      for\
        \ k in range(i, j):\n        current_xor ^= nums[k]\n      max_xor = max(max_xor,\
        \ current_xor)\n\n  return max_xor"
      programming_language: python3
      inputs:
      - nums: [3, 9, 8, 4]
        target: 2
      - nums: [1, 2, 3, 4]
        target: 7
      - nums: [5, 6, 7, 8]
        target: 2
      - nums: [2, 4, 6, 8]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 4
      - nums: [5, 6, 7, 8]
        target: 1
      - nums: [3, 9, 8, 4]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 5
      - nums: [5, 6, 7, 8]
        target: 6
      - nums: [2, 4, 6, 8]
        target: 4
      - nums: [1, 2, 3, 4]
        target: 2
      - nums: [5, 6, 7, 8]
        target: 8
      - nums: [3, 9, 8, 4]
        target: 9
      - nums: [1, 2, 3, 4]
        target: 3
      - nums: [5, 6, 7, 8]
        target: 7
      - nums: [2, 4, 6, 8]
        target: 6
      - nums: [1, 2, 3, 4]
        target: 6
      - nums: [5, 6, 7, 8]
        target: 5
      - nums: [3, 9, 8, 4]
        target: 1
      - nums: [1, 2, 3, 4]
        target: 8
      exec_results: [12, 7, 15, 14, 7, 15, 12, 7, 15, 14, 7, 15, 12, 7, 15, 14, 7,
        15, 12, 7]
    children: []
  - operation: ['2. "Implement the ''main'' function in the ''code'' key using a functional
        programming style, with a focus on immutability and higher-order functions,
        encapsulating data and behavior within pure functions', 'transform the functional
        implementation back into an imperative, mutable version, using global variables
        and side effects as needed"']
    middle_state:
      description: '# Maximum XOR With an Array Element

        You are given a non-empty array of integers `nums` and an integer `target`.

        Find the maximum integer in the array that can be obtained by performing a
        series of XOR operations on `nums` where each number can be used at most once.

        Return the maximum integer that can be obtained by performing the above operations,
        or 0 if no such integer exists.


        Example 1:

        Input: nums = [3, 9, 8, 4], target = 2

        Output: 3


        Example 2:

        Input: nums = [1, 2, 3, 4], target = 7

        Output: 4


        Example 3:

        Input: nums = [5, 6, 7, 8], target = 2

        Output: 0


        Note:

        - 1 <= nums.length <= 25

        - 1 <= nums[i], target <= 10^9

        - It''s guaranteed that the answer is unique.

        '
      code: "from functools import lru_cache\n\ndef main(nums, target):\n    def get_bit(num):\n\
        \        binary = bin(num)[2:]\n        return [int(bit) for bit in binary]\n\
        \n    @lru_cache(None)\n    def get_max_xor(i, target):\n        if target\
        \ == 0:\n            return 0\n        if i == len(nums):\n            return\
        \ 0\n        return max(get_max_xor(i + 1, target), get_max_xor(i + 1, target\
        \ ^ nums[i]) + nums[i])\n\n    return get_max_xor(0, target)"
      programming_language: python3
      inputs:
      - nums: [3, 9, 8, 4]
        target: 2
      - nums: [1, 2, 3, 4]
        target: 7
      - nums: [5, 6, 7, 8]
        target: 2
      - nums: [2, 4, 6, 8]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 4
      - nums: [5, 6, 7, 8]
        target: 1
      - nums: [3, 9, 8, 4]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 5
      - nums: [5, 6, 7, 8]
        target: 6
      - nums: [2, 4, 6, 8]
        target: 4
      - nums: [1, 2, 3, 4]
        target: 2
      - nums: [5, 6, 7, 8]
        target: 8
      - nums: [3, 9, 8, 4]
        target: 9
      - nums: [1, 2, 3, 4]
        target: 3
      - nums: [5, 6, 7, 8]
        target: 7
      - nums: [2, 4, 6, 8]
        target: 6
      - nums: [1, 2, 3, 4]
        target: 6
      - nums: [5, 6, 7, 8]
        target: 5
      - nums: [3, 9, 8, 4]
        target: 1
      - nums: [1, 2, 3, 4]
        target: 8
      exec_results: [21, 10, 26, 20, 10, 26, 21, 10, 26, 20, 10, 26, 24, 9, 26, 18,
        10, 21, 24, 10]
    content:
      description: '# Maximum XOR With an Array Element

        You are given a non-empty array of integers `nums` and an integer `target`.

        Find the maximum integer in the array that can be obtained by performing a
        series of XOR operations on `nums` where each number can be used at most once.

        Return the maximum integer that can be obtained by performing the above operations,
        or 0 if no such integer exists.


        Example 1:

        Input: nums = [3, 9, 8, 4], target = 2

        Output: 3


        Example 2:

        Input: nums = [1, 2, 3, 4], target = 7

        Output: 4


        Example 3:

        Input: nums = [5, 6, 7, 8], target = 2

        Output: 0


        Note:

        - 1 <= nums.length <= 25

        - 1 <= nums[i], target <= 10^9

        - It''s guaranteed that the answer is unique.

        '
      code: "max_xor = 0\ntarget = 0\nnums = []\n\ndef get_bit(num):\n    global max_xor,\
        \ target, nums\n    binary = bin(num)[2:]\n    return [int(bit) for bit in\
        \ binary]\n\ndef get_max_xor(i):\n    global max_xor, target, nums\n    global\
        \ max_xor_result\n    if target == 0:\n        max_xor = 0\n        return\n\
        \    if i == len(nums):\n        return\n    max_xor_result = max(get_max_xor(i\
        \ + 1), get_max_xor(i + 1, target ^ nums[i]) + nums[i])\n\ndef main():\n \
        \   global max_xor, target, nums\n    for num in range(0, 10):\n        nums.append(num)\n\
        \    get_max_xor(0)\n    print(max_xor)\n\nmain()"
      programming_language: python3
      inputs:
      - nums: [3, 9, 8, 4]
        target: 2
      - nums: [1, 2, 3, 4]
        target: 7
      - nums: [5, 6, 7, 8]
        target: 2
      - nums: [2, 4, 6, 8]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 4
      - nums: [5, 6, 7, 8]
        target: 1
      - nums: [3, 9, 8, 4]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 5
      - nums: [5, 6, 7, 8]
        target: 6
      - nums: [2, 4, 6, 8]
        target: 4
      - nums: [1, 2, 3, 4]
        target: 2
      - nums: [5, 6, 7, 8]
        target: 8
      - nums: [3, 9, 8, 4]
        target: 9
      - nums: [1, 2, 3, 4]
        target: 3
      - nums: [5, 6, 7, 8]
        target: 7
      - nums: [2, 4, 6, 8]
        target: 6
      - nums: [1, 2, 3, 4]
        target: 6
      - nums: [5, 6, 7, 8]
        target: 5
      - nums: [3, 9, 8, 4]
        target: 1
      - nums: [1, 2, 3, 4]
        target: 8
      exec_results: [null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null]
    children: []
  - operation: ['3. "Use a type hinting system in the ''main'' function in the ''code''
        key to specify the types of function arguments and return values, leveraging
        type inference and static analysis tools', 'remove type hints and annotations,
        opting for runtime type checking and dynamic typing instead"']
    middle_state:
      description: '# Maximum XOR With an Array Element

        You are given a non-empty array of integers `nums` and an integer `target`.

        Find the maximum integer in the array that can be obtained by performing a
        series of XOR operations on `nums` where each number can be used at most once.

        Return the maximum integer that can be obtained by performing the above operations,
        or 0 if no such integer exists.


        Example 1:

        Input: nums = [3, 9, 8, 4], target = 2

        Output: 3


        Example 2:

        Input: nums = [1, 2, 3, 4], target = 7

        Output: 4


        Example 3:

        Input: nums = [5, 6, 7, 8], target = 2

        Output: 0


        Note:

        - 1 <= nums.length <= 25

        - 1 <= nums[i], target <= 10^9

        - It''s guaranteed that the answer is unique.

        '
      code: "from functools import lru_cache\n\ndef main(nums: list[int], target:\
        \ int) -> int:\n  def get_bit(num: int) -> list[int]:\n    binary = bin(num)[2:]\n\
        \    return [int(bit) for bit in binary]\n\n  @lru_cache(None)\n  def get_max_xor(i:\
        \ int, target: int) -> int:\n    if target == 0:\n      return 0\n    if i\
        \ == len(nums):\n      return 0\n    return max(get_max_xor(i + 1, target),\
        \ get_max_xor(i + 1, target ^ nums[i]) + nums[i])\n\n  return get_max_xor(0,\
        \ target)"
      programming_language: python3
      inputs:
      - nums: [3, 9, 8, 4]
        target: 2
      - nums: [1, 2, 3, 4]
        target: 7
      - nums: [5, 6, 7, 8]
        target: 2
      - nums: [2, 4, 6, 8]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 4
      - nums: [5, 6, 7, 8]
        target: 1
      - nums: [3, 9, 8, 4]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 5
      - nums: [5, 6, 7, 8]
        target: 6
      - nums: [2, 4, 6, 8]
        target: 4
      - nums: [1, 2, 3, 4]
        target: 2
      - nums: [5, 6, 7, 8]
        target: 8
      - nums: [3, 9, 8, 4]
        target: 9
      - nums: [1, 2, 3, 4]
        target: 3
      - nums: [5, 6, 7, 8]
        target: 7
      - nums: [2, 4, 6, 8]
        target: 6
      - nums: [1, 2, 3, 4]
        target: 6
      - nums: [5, 6, 7, 8]
        target: 5
      - nums: [3, 9, 8, 4]
        target: 1
      - nums: [1, 2, 3, 4]
        target: 8
      exec_results: [21, 10, 26, 20, 10, 26, 21, 10, 26, 20, 10, 26, 24, 9, 26, 18,
        10, 21, 24, 10]
    content:
      description: '# Maximum XOR With an Array Element

        You are given a non-empty array of integers `nums` and an integer `target`.

        Find the maximum integer in the array that can be obtained by performing a
        series of XOR operations on `nums` where each number can be used at most once.

        Return the maximum integer that can be obtained by performing the above operations,
        or 0 if no such integer exists.


        Example 1:

        Input: nums = [3, 9, 8, 4], target = 2

        Output: 3


        Example 2:

        Input: nums = [1, 2, 3, 4], target = 7

        Output: 4


        Example 3:

        Input: nums = [5, 6, 7, 8], target = 2

        Output: 0


        Note:

        - 1 <= nums.length <= 25

        - 1 <= nums[i], target <= 10^9

        - It''s guaranteed that the answer is unique.

        '
      code: "from functools import lru_cache\n\ndef main(nums, target):\n  def get_bit(num):\n\
        \    binary = bin(num)[2:]\n    return [int(bit) for bit in binary]\n\n  @lru_cache(None)\n\
        \  def get_max_xor(i, target):\n    if target == 0:\n      return 0\n    if\
        \ i == len(nums):\n      return 0\n    return max(get_max_xor(i + 1, target),\
        \ get_max_xor(i + 1, target ^ nums[i]) + nums[i])\n\n  return get_max_xor(0,\
        \ target)"
      programming_language: python3
      inputs:
      - nums: [3, 9, 8, 4]
        target: 2
      - nums: [1, 2, 3, 4]
        target: 7
      - nums: [5, 6, 7, 8]
        target: 2
      - nums: [2, 4, 6, 8]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 4
      - nums: [5, 6, 7, 8]
        target: 1
      - nums: [3, 9, 8, 4]
        target: 3
      - nums: [1, 2, 3, 4]
        target: 5
      - nums: [5, 6, 7, 8]
        target: 6
      - nums: [2, 4, 6, 8]
        target: 4
      - nums: [1, 2, 3, 4]
        target: 2
      - nums: [5, 6, 7, 8]
        target: 8
      - nums: [3, 9, 8, 4]
        target: 9
      - nums: [1, 2, 3, 4]
        target: 3
      - nums: [5, 6, 7, 8]
        target: 7
      - nums: [2, 4, 6, 8]
        target: 6
      - nums: [1, 2, 3, 4]
        target: 6
      - nums: [5, 6, 7, 8]
        target: 5
      - nums: [3, 9, 8, 4]
        target: 1
      - nums: [1, 2, 3, 4]
        target: 8
      exec_results: [21, 10, 26, 20, 10, 26, 21, 10, 26, 20, 10, 26, 24, 9, 26, 18,
        10, 21, 24, 10]
    children: []
