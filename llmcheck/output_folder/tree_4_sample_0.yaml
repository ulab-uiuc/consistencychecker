operations:
- ['split the ''main'' function into multiple mini-functions, each only storing partial
    logic, with cryptic variable names that hide true purpose, and utilize a custom,
    self-maintaining dependency injection system to manage data flow between functions',
  'merge all mini-functions back into one coherent ''main'' function, restoring original
    descriptive variable names and reverting to traditional function calls']
- [replace the traditional object-oriented design of the 'main' function in the 'code'
    key with a functional programming approach using immutable data structures and
    higher-order functions, 'revert the ''main'' function to its original object-oriented
    design, restoring mutable state and traditional method calls']
- ['replace the iterative approach used in the ''main'' function in the ''code'' key
    with a recursive one, utilizing memoization to avoid redundant calculations',
  'revert the ''main'' function to its original iterative approach, removing memoization
    and traditional loop constructs']
metrics:
  embedding similarity L-1 AVG: 0.8171841818780559
  embedding similarity L-1: [0.712845234782428, 0.8315623197460742, 0.907144991105665]
  BLEU L-1 AVG: 0.008427056232464982
  BLEU L-1: [0, 0, 0.025281168697394947]
  ROUGE-rouge1 L-1 AVG: 0.05555555555555555
  ROUGE-rouge1 L-1: [0.0, 0.0, 0.16666666666666666]
  ROUGE-rouge2 L-1 AVG: 0.0196078431372549
  ROUGE-rouge2 L-1: [0.0, 0.0, 0.058823529411764705]
  ROUGE-rougeL L-1 AVG: 0.05555555555555555
  ROUGE-rougeL L-1: [0, 0.0, 0.16666666666666666]
  embedding similarity L-2 AVG: 0.0
  embedding similarity L-2: []
  BLEU L-2 AVG: 0.0
  BLEU L-2: []
  ROUGE-rouge1 L-2 AVG: 0.0
  ROUGE-rouge1 L-2: []
  ROUGE-rouge2 L-2 AVG: 0.0
  ROUGE-rouge2 L-2: []
  ROUGE-rougeL L-2 AVG: 0.0
  ROUGE-rougeL L-2: []
  embedding similarity L-3 AVG: 0.0
  embedding similarity L-3: []
  BLEU L-3 AVG: 0.0
  BLEU L-3: []
  ROUGE-rouge1 L-3 AVG: 0.0
  ROUGE-rouge1 L-3: []
  ROUGE-rouge2 L-3 AVG: 0.0
  ROUGE-rouge2 L-3: []
  ROUGE-rougeL L-3 AVG: 0.0
  ROUGE-rougeL L-3: []
evaluatee_model: {model: fireworks_ai/accounts/fireworks/models/llama-v3p1-8b-instruct,
  temperature: 0.6, api_base: 'https://api.fireworks.ai/inference/v1'}
root_content:
  description: '**Maximum Subarray Sum of Odd Length**

    ===

    Given an array of integers `nums`, find the maximum sum of a subarray of odd length.

    A subarray is a contiguous part of the array.

    ===

    **Example 1**

    ===

    Input: `nums = [1,2,3,4,5]`

    Output: `9`

    Explanation: The maximum subarray sum of odd length is `[1,3,5]`, which has a
    sum of `9`.

    ===

    **Example 2**

    ===

    Input: `nums = [1,2,3,4,5,6]`

    Output: `14`

    Explanation: The maximum subarray sum of odd length is `[1,3,5,6]`, which has
    a sum of `14`.

    ===

    **Constraints**

    ===

    - `1 <= nums.length <= 2 * 10^5`

    - `-10^5 <= nums[i] <= 10^5`

    ===

    **Note**

    ===

    The input array will only contain integers.

    '
  code: "def main(nums):\n    n = len(nums)\n    if n <= 2:\n        return max(nums)\n\
    \    max_sum = float('-inf')\n    for i in range(n):\n        if i + 1 in range(n):\n\
    \            for j in range(i + 1, n):\n                if (j - i) % 2 == 1:\n\
    \                    max_sum = max(max_sum, sum(nums[i:j + 1]))\n    return max_sum\n"
  programming_language: python3
  inputs:
  - nums: [1, 2, 3, 4, 5]
  - nums: [1, 2, 3, 4, 5, 6]
  - nums: [1, 2, 3, 4]
  - nums: [1, 2, 3, 4, 5, 6, 7]
  - nums: [1, 2, 3, 4, 5, 6, 7, 8]
  - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]
  - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  - nums: [-1, 1, -1, 1, -1, 1]
  - nums: [-1, 1, -1, 1, -1, 1, -1, 1]
  - nums: [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1]
  - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  - nums: [-10, 10, -10, 10, -10, 10, -10, 10]
  - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
  - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
  - nums: [10, 20, 30, 40, 50]
  - nums: [10, 20, 30, 40, 50, 60]
  exec_results: [14, 21, 10, 27, 36, 44, 55, 0, 0, 0, 10, 10, 12, 0, 0, 0, 140, 210]
tree:
  operation: null
  middle_state: null
  content:
    description: '**Maximum Subarray Sum of Odd Length**

      ===

      Given an array of integers `nums`, find the maximum sum of a subarray of odd
      length.

      A subarray is a contiguous part of the array.

      ===

      **Example 1**

      ===

      Input: `nums = [1,2,3,4,5]`

      Output: `9`

      Explanation: The maximum subarray sum of odd length is `[1,3,5]`, which has
      a sum of `9`.

      ===

      **Example 2**

      ===

      Input: `nums = [1,2,3,4,5,6]`

      Output: `14`

      Explanation: The maximum subarray sum of odd length is `[1,3,5,6]`, which has
      a sum of `14`.

      ===

      **Constraints**

      ===

      - `1 <= nums.length <= 2 * 10^5`

      - `-10^5 <= nums[i] <= 10^5`

      ===

      **Note**

      ===

      The input array will only contain integers.

      '
    code: "def main(nums):\n    n = len(nums)\n    if n <= 2:\n        return max(nums)\n\
      \    max_sum = float('-inf')\n    for i in range(n):\n        if i + 1 in range(n):\n\
      \            for j in range(i + 1, n):\n                if (j - i) % 2 == 1:\n\
      \                    max_sum = max(max_sum, sum(nums[i:j + 1]))\n    return\
      \ max_sum\n"
    programming_language: python3
    inputs:
    - nums: [1, 2, 3, 4, 5]
    - nums: [1, 2, 3, 4, 5, 6]
    - nums: [1, 2, 3, 4]
    - nums: [1, 2, 3, 4, 5, 6, 7]
    - nums: [1, 2, 3, 4, 5, 6, 7, 8]
    - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]
    - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    - nums: [-1, 1, -1, 1, -1, 1]
    - nums: [-1, 1, -1, 1, -1, 1, -1, 1]
    - nums: [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1]
    - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    - nums: [-10, 10, -10, 10, -10, 10, -10, 10]
    - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
    - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
    - nums: [10, 20, 30, 40, 50]
    - nums: [10, 20, 30, 40, 50, 60]
    exec_results: [14, 21, 10, 27, 36, 44, 55, 0, 0, 0, 10, 10, 12, 0, 0, 0, 140,
      210]
  children:
  - operation: ['split the ''main'' function into multiple mini-functions, each only
        storing partial logic, with cryptic variable names that hide true purpose,
        and utilize a custom, self-maintaining dependency injection system to manage
        data flow between functions', 'merge all mini-functions back into one coherent
        ''main'' function, restoring original descriptive variable names and reverting
        to traditional function calls']
    middle_state:
      description: '**Maximum Subarray Sum of Odd Length**

        ===

        Given an array of integers `nums`, find the maximum sum of a subarray of odd
        length.

        A subarray is a contiguous part of the array.

        ===

        **Example 1**

        ===

        Input: `nums = [1,2,3,4,5]`

        Output: `9`

        Explanation: The maximum subarray sum of odd length is `[1,3,5]`, which has
        a sum of `9`.

        ===

        **Example 2**

        ===

        Input: `nums = [1,2,3,4,5,6]`

        Output: `14`

        Explanation: The maximum subarray sum of odd length is `[1,3,5,6]`, which
        has a sum of `14`.

        ===

        **Constraints**

        ===

        - `1 <= nums.length <= 2 * 10^5`

        - `-10^5 <= nums[i] <= 10^5`

        ===

        **Note**

        ===

        The input array will only contain integers.

        '
      code: "function get_len(arr) {\n    return arr.length;\n}\n\nfunction is_two_or_less(arr)\
        \ {\n    return arr.length <= 2;\n}\n\nfunction get_inf() {\n    return -Infinity;\n\
        }\n\nfunction get_max(arr) {\n    return Math.max(...arr);\n}\n\nfunction\
        \ get_range(len) {\n    return Array(len).fill(0).map((_, i) => i);\n}\n\n\
        function is_odd(num) {\n    return (num & 1) === 1;\n}\n\nfunction get_slice(arr,\
        \ start, end) {\n    return arr.slice(start, end);\n}\n\nfunction sum_slice(arr,\
        \ start, end) {\n    return arr.slice(start, end).reduce((a, b) => a + b,\
        \ 0);\n}\n\nfunction get_max_sum(arr, i, j) {\n    return Math.max(get_max_sum(arr,\
        \ i, j - 1), sum_slice(arr, i, j));\n}\n\nfunction do_work(arr, i) {\n   \
        \ for (let j = i + 1; j < get_len(arr); j++) {\n        if (is_odd(j - i))\
        \ {\n            return get_max_sum(arr, i, j);\n        }\n    }\n}\n\nfunction\
        \ main(arr) {\n    if (is_two_or_less(arr)) {\n        return get_max(arr);\n\
        \    }\n    let max_sum = get_inf();\n    for (let i = 0; i < get_len(arr);\
        \ i++) {\n        max_sum = Math.max(max_sum, do_work(arr, i));\n    }\n \
        \   return max_sum;\n}"
      programming_language: javascript
      inputs:
      - nums: [1, 2, 3, 4, 5]
      - nums: [1, 2, 3, 4, 5, 6]
      - nums: [1, 2, 3, 4]
      - nums: [1, 2, 3, 4, 5, 6, 7]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      - nums: [-1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [10, 20, 30, 40, 50]
      - nums: [10, 20, 30, 40, 50, 60]
      exec_results: []
    content:
      description: '**Maximum Subarray Sum of Odd Length**

        ===

        Given an array of integers `nums`, find the maximum sum of a subarray of odd
        length.

        A subarray is a contiguous part of the array.

        ===

        **Example 1**

        ===

        Input: `nums = [1,2,3,4,5]`

        Output: `9`

        Explanation: The maximum subarray sum of odd length is `[1,3,5]`, which has
        a sum of `9`.

        ===

        **Example 2**

        ===

        Input: `nums = [1,2,3,4,5,6]`

        Output: `14`

        Explanation: The maximum subarray sum of odd length is `[1,3,5,6]`, which
        has a sum of `14`.

        ===

        **Constraints**

        ===

        - `1 <= nums.length <= 2 * 10^5`

        - `-10^5 <= nums[i] <= 10^5`

        ===

        **Note**

        ===

        The input array will only contain integers.

        '
      code: "function maxSumSubarray(arr) {\n    function get_len(arr) {\n       \
        \ return arr.length;\n    }\n    if (get_len(arr) <= 2) {\n        return\
        \ Math.max(...arr);\n    }\n    let max_sum = -Infinity;\n    for (let i =\
        \ 0; i < get_len(arr); i++) {\n        for (let j = i + 1; j < get_len(arr);\
        \ j++) {\n            if ((j - i) % 2 === 1) {\n                max_sum =\
        \ Math.max(max_sum, arr.slice(i, j).reduce((a, b) => a + b, 0));\n       \
        \     }\n        }\n    }\n    return max_sum;\n}"
      programming_language: javascript
      inputs:
      - nums: [1, 2, 3, 4, 5]
      - nums: [1, 2, 3, 4, 5, 6]
      - nums: [1, 2, 3, 4]
      - nums: [1, 2, 3, 4, 5, 6, 7]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      - nums: [-1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [10, 20, 30, 40, 50]
      - nums: [10, 20, 30, 40, 50, 60]
      exec_results: []
    children: []
  - operation: [replace the traditional object-oriented design of the 'main' function
        in the 'code' key with a functional programming approach using immutable data
        structures and higher-order functions, 'revert the ''main'' function to its
        original object-oriented design, restoring mutable state and traditional method
        calls']
    middle_state:
      description: '**Maximum Subarray Sum of Odd Length**

        ===

        Given an array of integers `nums`, find the maximum sum of a subarray of odd
        length.

        A subarray is a contiguous part of the array.

        ===

        **Example 1**

        ===

        Input: `nums = [1,2,3,4,5]`

        Output: `9`

        Explanation: The maximum subarray sum of odd length is `[1,3,5]`, which has
        a sum of `9`.

        ===

        **Example 2**

        ===

        Input: `nums = [1,2,3,4,5,6]`

        Output: `14`

        Explanation: The maximum subarray sum of odd length is `[1,3,5,6]`, which
        has a sum of `14`.

        ===

        **Constraints**

        ===

        - `1 <= nums.length <= 2 * 10^5`

        - `-10^5 <= nums[i] <= 10^5`

        ===

        **Note**

        ===

        The input array will only contain integers.

        '
      code: "from functools import reduce\n\ndef max_sum_of_odd_length_subarrays(nums):\n\
        \    n = len(nums)\n    return reduce(lambda max_sum, num: max(max_sum, num),\
        \ \n                 (sum(nums[i:j + 1]) for i in range(n) for j in range(i\
        \ + 1, n) if (j - i) % 2 == 1), \n                 float('-inf'))"
      programming_language: python3
      inputs:
      - nums: [1, 2, 3, 4, 5]
      - nums: [1, 2, 3, 4, 5, 6]
      - nums: [1, 2, 3, 4]
      - nums: [1, 2, 3, 4, 5, 6, 7]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      - nums: [-1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [10, 20, 30, 40, 50]
      - nums: [10, 20, 30, 40, 50, 60]
      exec_results: [null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null]
    content:
      description: '**Maximum Subarray Sum of Odd Length**

        ===

        Given an array of integers `nums`, find the maximum sum of a subarray of odd
        length.

        A subarray is a contiguous part of the array.

        ===

        **Example 1**

        ===

        Input: `nums = [1,2,3,4,5]`

        Output: `9`

        Explanation: The maximum subarray sum of odd length is `[1,3,5]`, which has
        a sum of `9`.

        ===

        **Example 2**

        ===

        Input: `nums = [1,2,3,4,5,6]`

        Output: `14`

        Explanation: The maximum subarray sum of odd length is `[1,3,5,6]`, which
        has a sum of `14`.

        ===

        **Constraints**

        ===

        - `1 <= nums.length <= 2 * 10^5`

        - `-10^5 <= nums[i] <= 10^5`

        ===

        **Note**

        ===

        The input array will only contain integers.

        '
      code: "class MaxSumOfOddLengthSubarrays:\n    def __init__(self, nums):\n  \
        \      self.nums = nums\n        self.max_sum = float('-inf')\n\n    def calculate_max_sum(self):\n\
        \        for i in range(len(self.nums)):\n            for j in range(i + 1,\
        \ len(self.nums)):\n                if (j - i) % 2 == 1:\n               \
        \     current_sum = sum(self.nums[i:j + 1])\n                    self.max_sum\
        \ = max(self.max_sum, current_sum)\n\n    def get_max_sum(self):\n       \
        \ self.calculate_max_sum()\n        return self.max_sum\n\nnums = [1, 4, 2,\
        \ 8, 4]\nmax_sum = MaxSumOfOddLengthSubarrays(nums)\nprint(max_sum.get_max_sum())"
      programming_language: python3
      inputs:
      - nums: [1, 2, 3, 4, 5]
      - nums: [1, 2, 3, 4, 5, 6]
      - nums: [1, 2, 3, 4]
      - nums: [1, 2, 3, 4, 5, 6, 7]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      - nums: [-1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [10, 20, 30, 40, 50]
      - nums: [10, 20, 30, 40, 50, 60]
      exec_results: [null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null]
    children: []
  - operation: ['replace the iterative approach used in the ''main'' function in the
        ''code'' key with a recursive one, utilizing memoization to avoid redundant
        calculations', 'revert the ''main'' function to its original iterative approach,
        removing memoization and traditional loop constructs']
    middle_state:
      description: '**Maximum Subarray Sum of Odd Length**

        ===

        Given an array of integers `nums`, find the maximum sum of a subarray of odd
        length.

        A subarray is a contiguous part of the array.

        ===

        **Example 1**

        ===

        Input: `nums = [1,2,3,4,5]`

        Output: `9`

        Explanation: The maximum subarray sum of odd length is `[1,3,5]`, which has
        a sum of `9`.

        ===

        **Example 2**

        ===

        Input: `nums = [1,2,3,4,5,6]`

        Output: `14`

        Explanation: The maximum subarray sum of odd length is `[1,3,5,6]`, which
        has a sum of `14`.

        ===

        **Constraints**

        ===

        - `1 <= nums.length <= 2 * 10^5`

        - `-10^5 <= nums[i] <= 10^5`

        ===

        **Note**

        ===

        The input array will only contain integers.

        '
      code: "def main(nums):\n    memo = {}\n\n    def max_sum(i, n):\n        if\
        \ (i, n) in memo:\n            return memo[(i, n)]\n        if n <= 2:\n \
        \           return max(nums[i:n])\n        max_val = float('-inf')\n     \
        \   for j in range(i + 1, n):\n            if (j - i) % 2 == 1:\n        \
        \        max_val = max(max_val, sum(nums[i:j + 1]))\n        memo[(i, n)]\
        \ = max_val\n        return max_val\n\n    return max_sum(0, len(nums))"
      programming_language: python3
      inputs:
      - nums: [1, 2, 3, 4, 5]
      - nums: [1, 2, 3, 4, 5, 6]
      - nums: [1, 2, 3, 4]
      - nums: [1, 2, 3, 4, 5, 6, 7]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      - nums: [-1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [10, 20, 30, 40, 50]
      - nums: [10, 20, 30, 40, 50, 60]
      exec_results: [10, 21, 10, 21, 36, 36, 55, 0, 0, 0, 10, 10, 12, 0, 0, 0, 100,
        210]
    content:
      description: '**Maximum Subarray Sum of Odd Length**

        ===

        Given an array of integers `nums`, find the maximum sum of a subarray of odd
        length.

        A subarray is a contiguous part of the array.

        ===

        **Example 1**

        ===

        Input: `nums = [1,2,3,4,5]`

        Output: `9`

        Explanation: The maximum subarray sum of odd length is `[1,3,5]`, which has
        a sum of `9`.

        ===

        **Example 2**

        ===

        Input: `nums = [1,2,3,4,5,6]`

        Output: `14`

        Explanation: The maximum subarray sum of odd length is `[1,3,5,6]`, which
        has a sum of `14`.

        ===

        **Constraints**

        ===

        - `1 <= nums.length <= 2 * 10^5`

        - `-10^5 <= nums[i] <= 10^5`

        ===

        **Note**

        ===

        The input array will only contain integers.

        '
      code: "def main(nums):\n    max_val = float('-inf')\n    for i in range(len(nums)):\n\
        \        for j in range(i + 1, len(nums) + 1):\n            if (j - i) % 2\
        \ == 1:\n                max_val = max(max_val, sum(nums[i:j]))\n    return\
        \ max_val"
      programming_language: python3
      inputs:
      - nums: [1, 2, 3, 4, 5]
      - nums: [1, 2, 3, 4, 5, 6]
      - nums: [1, 2, 3, 4]
      - nums: [1, 2, 3, 4, 5, 6, 7]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]
      - nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      - nums: [-1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10, -10, 10]
      - nums: [10, 20, 30, 40, 50]
      - nums: [10, 20, 30, 40, 50, 60]
      exec_results: [15, 20, 9, 28, 35, 45, 54, 1, 1, 1, 9, 11, 11, 10, 10, 10, 150,
        200]
    children: []
