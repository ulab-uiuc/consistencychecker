#    ______     ______     __   __     ______   __     ______
#   /\  ___\   /\  __ \   /\ "-.\ \   /\  ___\ /\ \   /\  ___\
#   \ \ \____  \ \ \/\ \  \ \ \-.  \  \ \  __\ \ \ \  \ \ \__ \
#    \ \_____\  \ \_____\  \ \_\\"\_\  \ \_\    \ \_\  \ \_____\
#     \/_____/   \/_____/   \/_/ \/_/   \/_/     \/_/   \/_____/
#
# This is an example configuration file for the LLMCheck tool complete with explanations.
# Start from here whenever possible.

# LLM Configurations
# Here it is plainly litellm style. You must leave out no fields.
# As a example, here is OPENAI gpt-4o-mini as both evaluator and evaluatee:
# evaluator:
#   model_name: "gpt-4o-mini"
#   api_base: "https://api.openai.com/v1"
#   temperature: 0.6
# evaluatee:
#   model_name: "gpt-4o-mini"
#   api_base: "https://api.openai.com/v1"
#   temperature: 0.6

# Here is a vllm setup:
evaluator:
  model_name: "gpt-4o-mini"
  api_base: "https://api.openai.com/v1"
  temperature: 0.6
evaluatee:
  model_name: "gpt-4o-mini"
  api_base: "https://api.openai.com/v1"
  temperature: 0.6

# Embedding Model Configurations
## Option 1. OpenAI API
similarity_config:
  type: "api"
  model_name: "text-embedding-ada-002"
  api_base: "https://api.openai.com/v1"
## Option 2. Huggingface Transformers (PyTorch, local)
# similarity_config:
#   type: "huggingface"
#   model_name: "google-bert/bert-base-uncased"
#   device: "cuda"

# Experiment Configurations
## max depth of the self-consistency tree
max_depth: 2
## number of operations to be applied to the input.
# if you provide more operations than this number, the evaluator will only consider the first n operations.
n_operations: 2

# Overrides, OPTIONAL
# if you provide a root, it will override the root generated by the evaluator model.
# root: "Artificial intelligence enhances the efficiency of various industries by automating tasks, analyzing data, and providing insights for better decision-making."

# if you provide a list of operations, it will override the operations generated by the evaluator model.
# operations:
#   - ["replace all nouns with synonyms", "replace all synonyms with the original nouns"]
#   - ["convert to passive voice", "convert back to active voice"]
#   - ["remove all adjectives", "restore the eliminated adjectives"]

# constraint to generate root using evalutor model.
constraints: |
  Write a simple sentence about artificial intelligence in 20 words.
  Please do this in a function way, e.g. provide a function called "main"
  that returns the intended sentence as a string.
  You will have to provide this in a JSON format, comprising of multiple
  keys and values:
  - "code": the code that defines the function
  - "programming_language": the programming language used in the code.
                            In this case, it should be "python3".
  - "inputs": the inputs that tests its functionality. It is a list of
              dictionaries for the kwargs of the function. As we do not
              have any inputs, it should be a list with only element, an
              empty dictionary.
  - "description": a brief description of the function. For instance, if
                   the code is a solution to a LeetCode problem, the description
                   should be the problem statement.
  Your response should be in a JSON code block, e.g. "```json\n{...}\n```".
  Please make sure that the JSON response is valid. Do NOT include anything else.

prompt_template: |
  Generate {n_operations} pairs of transform-reverse operations for testing language model consistency.
  Please make sure that these operations should be fit to perform on the root text: "{root_code}".
  Each operation should modify the text and its reverse should restore it.
  Format each line as: "transform operation | reverse operation"
  Example: "translate what \"main\" function returns to Japanese, and do not provide anything else. | translate what the \"main\" function returns to English, and do not provide anything else."
  Please try out what I have suggested above and then come up with your own ideas. Please avoid overly simple operations like "add a period | remove a period" or "capitalize the first letter | lowercase the first letter".
  Please start each line without '- ', '1. ', 'a. ', 'i. ', etc. Keep it simple and clear. Just the operation and its reverse.
  Please make sure in the operation to highlight that the transformation is evaluatee to the \"main\" function in the \"code\" key of the JSON text.

operation_code_format_enforce_prompt: |
  For the sake of parsing, please enclose your code within a code block,
  e.g. f"```{programming_language}\n{code}\n```". Please make sure that the code is valid.
  And programming_language is the language for the code. For python code, it should be "python3".
  For JavaScript code, it should be "javascript", etc. Do NOT include anything else.

# evaluation parameters
# "1" stands for L-1 AVG Similarity: the average similarity between direct parent-child node pairs
# "2" stands for L-2 AVG Similarity: the average similarity between grandparent-parent-child node triplets
# ...
distance: [1, 2, 3, 5]
