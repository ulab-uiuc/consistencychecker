# these will feed into litellm

# please specify api keys (if needed) with environment variables
evaluator:
  model_name: "gpt-4o-mini"
  api_base: "https://api.openai.com/v1"
  temperature: 0.6
evaluatee:
  # model_name: "ollama/llama3.1:8b-instruct-q8_0"
  # api_base: "http://localhost:11434"
  model_name: "gpt-4o-mini"
  api_base: "https://api.openai.com/v1"
  temperature: 0.6
similarity_config:
  type: "api"
  model_name: "text-embedding-ada-002"
  api_base: "https://api.openai.com/v1"

# this uses huggingface's transformers library
# similarity_config:
#   type: "huggingface"
#   model_name: "google-bert/bert-base-uncased"
#   device: "cuda"

# sadly however, ollama does not currently provide openai-like embedding apis;
# or I will have the huggingface/torch access mode removed just use apis instead

# max depth of the self-consistency tree
max_depth: 2

# number of operations to be applied to the input.
# if you provide more operations than this number, the evaluator will only consider the first n operations.
n_operations: 2

# constraint to generate root using evalutor model.
constraints: |
  Write a simple sentence about artificial intelligence in 20 words.
  Please do this in a function way, e.g. provide a function called "main"
  that returns the intended sentence as a string.
  You will have to provide this in a JSON format, comprising of multiple
  keys and values:
  - "code": the code that defines the function
  - "programming_language": the programming language used in the code.
                            In this case, it should be "python3".
  - "inputs": the inputs that tests its functionality. It is a list of
              dictionaries for the kwargs of the function. As we do not
              have any inputs, it should be a list with only element, an
              empty dictionary.
  - "description": a brief description of the function. For instance, if
                   the code is a solution to a LeetCode problem, the description
                   should be the problem statement.
  Your response should be in a JSON code block, e.g. "```json\n{...}\n```".
  Please make sure that the JSON response is valid. Do NOT include anything else.

prompt_template: |
  Generate {n_operations} pairs of transform-reverse operations for testing language model consistency.
  Please make sure that these operations should be fit to perform on the root text: "{root_code}".
  Each operation should modify the text and its reverse should restore it.
  Format each line as: "transform operation | reverse operation"
  Example: "translate what \"main\" function returns to Japanese, and do not provide anything else. | translate what the \"main\" function returns to English, and do not provide anything else."
  Please try out what I have suggested above and then come up with your own ideas. Please avoid overly simple operations like "add a period | remove a period" or "capitalize the first letter | lowercase the first letter".
  Please start each line without '- ', '1. ', 'a. ', 'i. ', etc. Keep it simple and clear. Just the operation and its reverse.
  Please make sure in the operation to highlight that the transformation is evaluatee to the \"main\" function in the \"code\" key of the JSON text.

# optional
# if you provide a root, it will override the root generated by the evaluator model.
# root: "Artificial intelligence enhances the efficiency of various industries by automating tasks, analyzing data, and providing insights for better decision-making."

# optional
# if you provide a list of operations, it will override the operations generated by the evaluator model.
# operations:
#   - ["replace all nouns with synonyms", "replace all synonyms with the original nouns"]
#   - ["convert to passive voice", "convert back to active voice"]
#   - ["remove all adjectives", "restore the eliminated adjectives"]

# optional
operation_code_format_enforce_prompt: |
  For the sake of parsing, please enclose your code within a code block,
  e.g. f"```{programming_language}\n{code}\n```". Please make sure that the code is valid.
  And programming_language is the language for the code. For python code, it should be "python3".
  For JavaScript code, it should be "javascript", etc. Do NOT include anything else.

# evaluation parameters
# "1" stands for L-1 AVG Similarity: the average similarity between direct parent-child node pairs
# "2" stands for L-2 AVG Similarity: the average similarity between grandparent-parent-child node triplets
# ...
distance: [1, 2, 3, 5]
